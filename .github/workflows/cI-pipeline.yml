name: CI Pipeline

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release version'
        required: true
        default: '1.0.0'
      run_cd:
        description: 'Trigger CD after build?'
        required: false
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'

env:
  APP_NAME: comprehensive-production-ci-cd-pipeline-github-actions

jobs:
  build-and-scan:
    name: Build, Scan & SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Build & Test
        run: mvn clean package

      - name: Copy project dependencies
        run: mvn dependency:copy-dependencies

      - name: Trivy File Scan
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: fs
          input: .
          exit-code: 0
          severity: HIGH,CRITICAL
          skip-dirs: target,.git

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=comprehensive-production-ci-cd-pipeline
            -Dsonar.organization=mohamedesmael10
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.java.binaries=target
            -Dsonar.java.libraries=target/dependency/*.jar
        env:
          SONAR_TOKEN: ${{ secrets.SONARTOKEN }}

      - name: SonarCloud Quality Gate Check
        id: quality-gate
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        with:
          # correct camelCase key:
          scanMetadataReportFile: .scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONARTOKEN }}

      - name: Print SonarCloud Quality Gate result
        run: echo "SonarCloud Quality Gate Status: ${{ steps.quality-gate.outcome }}"

  docker:
    name: Build, Scan & Push Docker Image
    needs: build-and-scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERUSER }}
          password: ${{ secrets.DOCKERPASS }}

      - name: Build & Tag Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: |
            ${{ secrets.DOCKERUSER }}/${{ env.APP_NAME }}:${{ github.event.inputs.release }}-${{ github.run_number }}
            ${{ secrets.DOCKERUSER }}/${{ env.APP_NAME }}:latest

      - name: Trivy Image Scan
        id: trivy-scan
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: image
          image-ref: ${{ secrets.DOCKERUSER }}/${{ env.APP_NAME }}:latest
          exit-code: 0
          severity: HIGH,CRITICAL

      - name: Print Trivy scan result
        run: echo "Trivy scan completed for image: ${{ secrets.DOCKERUSER }}/${{ env.APP_NAME }}:latest"

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERUSER }}/${{ env.APP_NAME }}:${{ github.event.inputs.release }}-${{ github.run_number }}
          docker push ${{ secrets.DOCKERUSER }}/${{ env.APP_NAME }}:latest

      - name: Notify on Success
        if: ${{ success() }}
        run: echo "CI Pipeline completed successfully; image_tag=${{ github.event.inputs.release }}-${{ github.run_number }}"

      - name: Notify on Failure
        if: ${{ failure() }}
        run: echo "CI Pipeline failed. Check logs for details."

  trigger-cd:
    name: Trigger CD Workflow
    if: github.event.inputs.run_cd == 'true'
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dispatch CD pipeline
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
        run: |
          curl -X POST \
               -H "Accept: application/vnd.github+json" \
               -H "Authorization: Bearer $GITHUB_TOKEN" \
               https://api.github.com/repos/mohamedesmael10/comprehensive-production-ci-cd-pipeline/actions/workflows/cd-pipeline.yml/dispatches \
               -d '{"ref":"git-actions-pipeline","inputs":{"image_tag":"'"${{ github.event.inputs.release }}-${{ github.run_number }}"'"}}'
