- name: Deploy Monitoring Stack on EKS
  hosts: localhost
  connection: local
  vars:
    monitoring_namespace: monitoring
    elastic_namespace: logging

  tasks:
    - name: Create monitoring namespace
      command: kubectl create namespace {{ monitoring_namespace }}
      ignore_errors: yes

    - name: Add Prometheus Helm repo
      command: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

    - name: Add Grafana Helm repo
      command: helm repo add grafana https://grafana.github.io/helm-charts

    - name: Update Helm repos
      command: helm repo update

    - name: Install Prometheus
      command: >
        helm upgrade --install prometheus prometheus-community/prometheus
        --namespace {{ monitoring_namespace }}

    - name: Install Grafana
      command: >
        helm upgrade --install grafana grafana/grafana
        --namespace {{ monitoring_namespace }}
        --set adminPassword='admin'
        --set service.type=LoadBalancer

    - name: Wait for Grafana service to get external IP
      shell: |
        for i in $(seq 1 30); do
          ip=$(kubectl get svc grafana -n {{ monitoring_namespace }} -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          if [ ! -z "$ip" ]; then echo "Grafana is up at $ip"; exit 0; fi
          sleep 10
        done
        exit 1

    - name: Create logging namespace
      command: kubectl create namespace {{ elastic_namespace }}
      ignore_errors: yes

    - name: Add Elastic Helm repo
      command: helm repo add elastic https://helm.elastic.co

    - name: Update Helm repos (again)
      command: helm repo update

    - name: Install Elasticsearch
      command: >
        helm upgrade --install elasticsearch elastic/elasticsearch
        --namespace {{ elastic_namespace }}
        --set service.type=LoadBalancer

    - name: Install Kibana
      command: >
        helm upgrade --install kibana elastic/kibana
        --namespace {{ elastic_namespace }}
        --set service.type=LoadBalancer

    - name: Wait for Kibana service to get external IP
      shell: |
        for i in $(seq 1 30); do
          ip=$(kubectl get svc kibana-kibana -n {{ elastic_namespace }} -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          if [ ! -z "$ip" ]; then echo "Kibana is up at $ip"; exit 0; fi
          sleep 10
        done
        exit 1
