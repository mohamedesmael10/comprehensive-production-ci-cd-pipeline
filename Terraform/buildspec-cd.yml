version: 0.2

env:
  variables:
    AWS_REGION: "us-east-1"
    ECR_REPO_NAME: "comprehensive-production-ci-cd-pipeline-codepipeline"
    EKS_CLUSTER_NAME: "mohamed-esmael-cluster-v2"
    EKS_NAMESPACE: "mohamed-esmael-namespace"
    EKS_SERVICE_NAME: "mohamed-esmael-service"
    AWS_ACCOUNT_ID: "025066251600"
  exported-variables:
    - IMAGE_TAG

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - echo "Installing dependencies..."
      - apt-get update && apt-get install -y curl unzip git jq ansible
      - echo "Installing kubectl..."
      - curl -LO "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - echo "kubectl installation complete."

      - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
      - chmod +x get_helm.sh
      - ./get_helm.sh
      - echo "Helm installed successfully."

  pre_build:
    commands:
      - echo "Authenticating with EKS cluster..."
      - aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      - echo "Checking for image tag..."
      - |
        if [ -f image_tag.txt ]; then
          export IMAGE_TAG="$(cat image_tag.txt | tr -d '\r\n')"
          echo "Using IMAGE_TAG from file: $IMAGE_TAG"
        else
          export IMAGE_TAG="latest"
          echo "image_tag.txt not found. Using fallback: $IMAGE_TAG"
        fi
      - export ECR_REPO_URI="025066251600.dkr.ecr.us-east-1.amazonaws.com/comprehensive-production-ci-cd-pipeline-codepipeline"
      

  build:
    commands:
      - echo "Running Ansible Playbook for monitoring stack deployment..."
      - ansible-playbook Ansible/deploy_monitoring.yaml --extra-vars "image_tag=$IMAGE_TAG image_repo=$ECR_REPO_URI namespace=$EKS_NAMESPACE service_name=$EKS_SERVICE_NAME"

      - export PUSHGATEWAY_HOST=$(kubectl get svc pushgateway -n monitoring -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
      - echo "Pushgateway host: $PUSHGATEWAY_HOST"
      
      - echo "Pushing custom metric to CloudWatch..."
      - aws cloudwatch put-metric-data \
          --namespace "CodePipelineMonitoring" \
          --metric-name "BuildSuccess" \
          --dimensions Pipeline=CodePipeline,Stage=Build \
          --value 1

      - echo "Logging deployment status for ELK ingestion..."
      - echo "{\"timestamp\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \"status\":\"success\", \"image\":\"$IMAGE_TAG\"}" >> build_log.json

      - echo "Pushing custom metrics to Prometheus Pushgateway..."
      - |
        echo "build_duration_seconds $(date +%s)" > metrics.txt
        echo "build_status 1" >> metrics.txt
        curl -X POST --data-binary @metrics.txt http://$PUSHGATEWAY_HOST:9091/metrics/job/codebuild_pipeline

artifacts:
  files:
    - image_tag.txt
    - build_log.json
    - metrics.txt
